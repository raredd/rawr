% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{regcaptures}
\alias{regcaptures}
\alias{regcaptures2}
\title{Extract captured substrings}
\usage{
regcaptures(x, m, use.names = TRUE)

regcaptures2(x, pattern, use.names = TRUE, simplify = FALSE)
}
\arguments{
\item{x}{a character vector}

\item{m}{an object with match data}

\item{use.names}{logical; if \code{FALSE}, all names (capture names and list
names) will be stripped; if \code{TRUE} (default) and capture groups have
names, these will be used; otherwise, match start positions will be used}

\item{pattern}{a character string containing a Perl-compatible regular
expression}

\item{simplify}{logical; if \code{TRUE}, result will be coerced to a matrix

alternatively, a data frame with a column corresponding to each capture
expression in order; captured character vectors are coerced to the type of
the column, and the column names are carried over to the return value; any
data in the prototype are ignored}
}
\value{
A list with a matrix of captures for each string in \code{x}. Note that the
column names of each matrix will be the starting positions of the captures.
}
\description{
Extract the captured substrings from match data obtained by
\code{\link{regexpr}}, \code{\link{gregexpr}}, or \code{\link{regexec}}.
\code{regcaptures2} is a convenience wrapper for \code{regcaptures}; see
examples.
}
\examples{
x <- c('larry:35,M', 'alison:22,F', 'dave:,M', 'lily:55,F', 'no data')
p1 <- '(.*):(\\\\d+)?,([MF])?'
p2 <- '(?<name>.*):(?<age>\\\\d+)?,(?<sex>[MF])?'

m <- regexpr(p1, x, perl = TRUE)
regcaptures(x, m)

## regcaptures2 is a convenience function for the two-step above
regcaptures2(x, p1)
regcaptures2(x, p1, simplify = TRUE)

## both will use named captures (if perl = TRUE)
regcaptures(x, gregexpr(p2, x, perl = TRUE))
regcaptures2(x, p2, simplify = TRUE)


## use simplify = proto
proto <- data.frame(name = character(), age = integer(), sex = character())
regcaptures2(x, p1, simplify = proto)

proto <- data.frame(name = '', age = NA_integer_, sex = factor('', c('M', 'F')))
regcaptures2(x, p1, simplify = proto)


## capture overlapping matches
x <- 'ACCACCACCCAC'
m <- gregexpr('(?=([AC]C))', x, perl = TRUE)
regcaptures(x, m)[[1]]

m <- gregexpr('(?=(CC))', x, perl = TRUE)
regcaptures(x, m)[[1]]

## compare:
mapply(function(xx) substr(x, xx, xx + 1L), m[[1]])

}
\references{
Adapted from \url{https://gist.github.com/MrFlick/10413321}
}
\seealso{
\code{\link{regmatches}}; \code{\link{strcapture}}
}
